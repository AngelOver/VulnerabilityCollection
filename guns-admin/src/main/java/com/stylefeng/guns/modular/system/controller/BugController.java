package com.stylefeng.guns.modular.system.controller;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.stylefeng.guns.core.base.controller.BaseController;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.beans.factory.annotation.Autowired;

import com.stylefeng.guns.core.log.LogObjectHolder;
import com.stylefeng.guns.core.util.ToolUtil;

import org.springframework.web.bind.annotation.RequestParam;

import com.stylefeng.guns.modular.system.model.Bug;
import com.stylefeng.guns.modular.system.service.IBugService;

/**
 * 漏洞采集管理控制器
 *
 * @author fengshuonan
 * @Date 2018-07-05 00:03:50
 */
@Controller
@RequestMapping("/bug")
public class BugController extends BaseController {

    private String PREFIX = "/system/bug/";

    @Autowired
    private IBugService bugService;

    /**
     * 跳转到漏洞采集管理首页
     */
    @RequestMapping("")
    public String index() {
        return PREFIX + "bug.html";
    }

    /**
     * 跳转到添加漏洞采集管理
     */
    @RequestMapping("/bug_add")
    public String bugAdd() {
        return PREFIX + "bug_add.html";
    }

    /**
     * 跳转到修改漏洞采集管理
     */
    @RequestMapping("/bug_update/{bugId}")
    public String bugUpdate(@PathVariable Integer bugId, Model model) {
        Bug bug = bugService.selectById(bugId);
        model.addAttribute("item",bug);
        LogObjectHolder.me().set(bug);
        return PREFIX + "bug_edit.html";
    }

    /**
     * 获取漏洞采集管理列表
     */
    @RequestMapping(value = "/list")
    @ResponseBody
    public Object list(String condition) {
    	EntityWrapper<Bug> entityWrapper =new EntityWrapper<Bug>();
   		
    	if(ToolUtil.isNotEmpty(condition)){
    		entityWrapper.like("CONCAT(code,code_desc)", condition);
    	}
    	
        return bugService.selectList(entityWrapper);
    }

    /**
     * 新增漏洞采集管理
     */
    @RequestMapping(value = "/add")
    @ResponseBody
    public Object add(Bug bug) {
        bugService.insert(bug);
        return SUCCESS_TIP;
    }

    /**
     * 删除漏洞采集管理
     */
    @RequestMapping(value = "/delete")
    @ResponseBody
    public Object delete(@RequestParam Integer bugId) {
        bugService.deleteById(bugId);
        return SUCCESS_TIP;
    }

    /**
     * 修改漏洞采集管理
     */
    @RequestMapping(value = "/update")
    @ResponseBody
    public Object update(Bug bug) {
        bugService.updateById(bug);
        return SUCCESS_TIP;
    }

    /**
     * 漏洞采集管理详情
     */
    @RequestMapping(value = "/detail/{bugId}")
    @ResponseBody
    public Object detail(@PathVariable("bugId") Integer bugId) {
        return bugService.selectById(bugId);
    }
}
